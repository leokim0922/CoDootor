{
  "stats": {
    "suites": 20,
    "tests": 67,
    "passes": 67,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-29T22:41:35.987Z",
    "end": "2024-07-29T22:42:36.981Z",
    "duration": 60994,
    "testsRegistered": 67,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eaf40ee2-c6df-4c7b-889c-e7099d975806",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "114b5c5e-3919-4fd8-b492-dfcf79e96666",
          "title": "Tests for the Ollama backend REST API endpoints",
          "fullFile": "/usr/src/app/server/test/app.test.js",
          "file": "/test/app.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"before all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer = server.app.listen(done);\nrequest = supertest.agent(testServer);",
              "err": {},
              "uuid": "8c0f04cc-5552-4377-b12c-6cc40cfe1fe1",
              "parentUUID": "114b5c5e-3919-4fd8-b492-dfcf79e96666",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "fullTitle": "Tests for the Ollama backend REST API endpoints \"after all\" hook in \"Tests for the Ollama backend REST API endpoints\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "testServer.close(done);",
              "err": {},
              "uuid": "a9a11a3a-8936-46ec-b54a-b52fc316eb4b",
              "parentUUID": "114b5c5e-3919-4fd8-b492-dfcf79e96666",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "25c8fbfc-0190-4b9c-aa79-82ed7d4594ae",
              "title": "Testing the POST endpoint for /code",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing a regular description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Providing a regular description",
                  "timedOut": false,
                  "duration": 9661,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request\n.post('/code')\n.send(two_sum_fn_desc)\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body.llm_code).to.not.equal(null);\n    expect(res.body.llm_code).to.match(/return [\\w]+ \\+ [\\w]+/);\n    expect(res.body.llm_code).to.match(/function [\\w]+\\([\\w]+\\,[\\s]*[\\w]+\\)/);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "6765e448-67a8-4e2a-90ab-b4a7f1425e70",
                  "parentUUID": "25c8fbfc-0190-4b9c-aa79-82ed7d4594ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not providing a body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /code Not providing a body",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/code')\n.send({})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "e1e06e83-6ef4-4bc5-a916-43a47d514611",
                  "parentUUID": "25c8fbfc-0190-4b9c-aa79-82ed7d4594ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6765e448-67a8-4e2a-90ab-b4a7f1425e70",
                "e1e06e83-6ef4-4bc5-a916-43a47d514611"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9667,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "b82b3fb9-bad1-4367-ae3d-72e963a30c6d",
              "title": "Testing the POST endpoint for /grade",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Providing random description",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing random description",
                  "timedOut": false,
                  "duration": 11191,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"blah\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(false);\n    expect(res.body.results[1].passed).to.equal(false);\n    expect(res.body.results[2].passed).to.equal(false);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "93afb82c-42d6-41dc-aa85-681d5e023637",
                  "parentUUID": "b82b3fb9-bad1-4367-ae3d-72e963a30c6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing bad JSON body",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing bad JSON body",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"No description was provided.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "b32ce4f4-5f32-4521-bef3-7d22ae3b74b8",
                  "parentUUID": "b82b3fb9-bad1-4367-ae3d-72e963a30c6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing invalid QID",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing invalid QID",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 999, \"llm_code\": \"function foo(a, b) { return a + b; }\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "ea8a4e0a-bb0a-4a2d-8be7-7836c2c2c37c",
                  "parentUUID": "b82b3fb9-bad1-4367-ae3d-72e963a30c6d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Providing a regular, valid function for grade",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing the POST endpoint for /grade Providing a regular, valid function for grade",
                  "timedOut": false,
                  "duration": 11045,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.post('/grade')\n.send({\"id\": 1, \"desc\": \"Takes two numbers and adds them together\", \"user_id\": \"75043986\"})\n.set({'Authorization': `Bearer ${process.env.JWT_TEST_TOKEN}`})\n.set('Accept', 'application/json')\n.expect('Content-Type', /json/)\n.expect(200)\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.results.length).to.equal(3);\n    expect(res.body.results[0].passed).to.equal(true);\n    expect(res.body.results[1].passed).to.equal(true);\n    expect(res.body.results[2].passed).to.equal(true);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "9dcacf73-86f3-40cd-8410-121967596509",
                  "parentUUID": "b82b3fb9-bad1-4367-ae3d-72e963a30c6d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93afb82c-42d6-41dc-aa85-681d5e023637",
                "b32ce4f4-5f32-4521-bef3-7d22ae3b74b8",
                "ea8a4e0a-bb0a-4a2d-8be7-7836c2c2c37c",
                "9dcacf73-86f3-40cd-8410-121967596509"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22244,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "ab68a7c8-669a-4d5a-b596-7590de8bb3a0",
              "title": "Testing question and unit test GET endpoints",
              "fullFile": "/usr/src/app/server/test/app.test.js",
              "file": "/test/app.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching question 1",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/1')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(200);\n    expect(res.body).to.not.equal(null);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "4472cfe4-0cbf-4920-a859-023f2fba70b1",
                  "parentUUID": "ab68a7c8-669a-4d5a-b596-7590de8bb3a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant question",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant question",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/question/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve the question.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "bcf3bad2-681e-4e99-b907-1264c7a9e53f",
                  "parentUUID": "ab68a7c8-669a-4d5a-b596-7590de8bb3a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching unit tests for question 1",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching unit tests for question 1",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/1')\n.end(function(err, res) {\n    expect(res.body).to.not.equal(null);\n    expect(res.body.length).to.equal(3);\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "99f0ddc1-fd1f-4dd5-93c9-03aedb1c710c",
                  "parentUUID": "ab68a7c8-669a-4d5a-b596-7590de8bb3a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching a non-existant set of unit tests",
                  "fullTitle": "Tests for the Ollama backend REST API endpoints Testing question and unit test GET endpoints Fetching a non-existant set of unit tests",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.get('/unit_tests/ford_prefect')\n.end(function(err, res) {\n    expect(res.statusCode).to.equal(400);\n    expect(res.body).to.not.equal(null);\n    expect(res.body.error).to.equal(\"Failed to retrieve test cases.\");\n    if (err) done(err);\n    done();\n})",
                  "err": {},
                  "uuid": "c83320f0-d1d4-4df7-b778-b97e3f4078da",
                  "parentUUID": "ab68a7c8-669a-4d5a-b596-7590de8bb3a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4472cfe4-0cbf-4920-a859-023f2fba70b1",
                "bcf3bad2-681e-4e99-b907-1264c7a9e53f",
                "99f0ddc1-fd1f-4dd5-93c9-03aedb1c710c",
                "c83320f0-d1d4-4df7-b778-b97e3f4078da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "08a74d03-8f92-447e-8dc7-3c599952b0cc",
          "title": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers",
          "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
          "file": "/test/ollama_api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "05df7b3d-3e00-435a-96f1-6f6c9c3fead0",
              "title": "Testing the GeneratePrompt function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Basic description of a function test",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Basic description of a function test",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"hello world\");\nexpect(prompt)\n.to\n.equal(\"Write me a Javascript function that has the following purpose: hello world. Only show me the code and call the function foo. Do not make it a const and do not make it an anonymous function.\")",
                  "err": {},
                  "uuid": "081d7088-483c-45d0-a086-eedba6b1aa9e",
                  "parentUUID": "05df7b3d-3e00-435a-96f1-6f6c9c3fead0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(\"\");\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "62dd16f9-c087-4bed-ac99-f4eeb0662aad",
                  "parentUUID": "05df7b3d-3e00-435a-96f1-6f6c9c3fead0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt(null);\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "1d3cfd75-4517-46d2-948f-4273b6a70177",
                  "parentUUID": "05df7b3d-3e00-435a-96f1-6f6c9c3fead0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Missing description (empty string)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the GeneratePrompt function Missing description (empty string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const prompt = oa.GeneratePrompt();\nexpect(prompt)\n.to\n.equal(null)",
                  "err": {},
                  "uuid": "60347d23-1cd6-4ed0-8c44-e025a2975eb1",
                  "parentUUID": "05df7b3d-3e00-435a-96f1-6f6c9c3fead0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "081d7088-483c-45d0-a086-eedba6b1aa9e",
                "62dd16f9-c087-4bed-ac99-f4eeb0662aad",
                "1d3cfd75-4517-46d2-948f-4273b6a70177",
                "60347d23-1cd6-4ed0-8c44-e025a2975eb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "8c4887ff-db8a-4ca4-b750-d721325172b2",
              "title": "Testing the ParseResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Regular response from LLM",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(llm_two_sum_response);\nexpect(resp).to.contain('function foo');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('return a + b');",
                  "err": {},
                  "uuid": "c68febb1-e8e7-457c-8980-52837f96c353",
                  "parentUUID": "8c4887ff-db8a-4ca4-b750-d721325172b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing error response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing error response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "2501752d-95e5-42ce-afea-6d51bc7891ba",
                  "parentUUID": "8c4887ff-db8a-4ca4-b750-d721325172b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "b2b826a4-1530-42b4-8fd3-9a7f4a9f14a9",
                  "parentUUID": "8c4887ff-db8a-4ca4-b750-d721325172b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Parsing a weird response from LLM",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the ParseResponse function Parsing a weird response from LLM",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = oa.ParseLLMResponse(weird_llm_response);\nexpect(resp).to.contain('function');\nexpect(resp).to.not.contain(\"```\");\nexpect(resp).to.contain('toLowerCase');",
                  "err": {},
                  "uuid": "dbdcb1cf-6325-4cfe-8c43-ca7b6246029c",
                  "parentUUID": "8c4887ff-db8a-4ca4-b750-d721325172b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c68febb1-e8e7-457c-8980-52837f96c353",
                "2501752d-95e5-42ce-afea-6d51bc7891ba",
                "b2b826a4-1530-42b4-8fd3-9a7f4a9f14a9",
                "dbdcb1cf-6325-4cfe-8c43-ca7b6246029c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "3c362ea5-1388-4aff-a28e-42d258e54ac4",
              "title": "Testing the FetchResponse function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Fetching response for regular query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for regular query",
                  "timedOut": false,
                  "duration": 8662,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code).to.contain(\"function\");\nexpect(resp.llm_code).to.contain(\"+\");",
                  "err": {},
                  "uuid": "d6dec6e7-65c9-4681-a7f9-3c4ad04ec107",
                  "parentUUID": "3c362ea5-1388-4aff-a28e-42d258e54ac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for random query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for random query",
                  "timedOut": false,
                  "duration": 10960,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(\"blah\")\nexpect(resp).to.not.equal(null);",
                  "err": {},
                  "uuid": "a9ee7601-5244-412c-b50c-8aaa4de69407",
                  "parentUUID": "3c362ea5-1388-4aff-a28e-42d258e54ac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for null query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for null query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(null);\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "1af453b1-c28d-4a19-8e85-1e7490840fb0",
                  "parentUUID": "3c362ea5-1388-4aff-a28e-42d258e54ac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Fetching response for missing query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the FetchResponse function Fetching response for missing query",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse();\nexpect(resp).to.equal(null);",
                  "err": {},
                  "uuid": "6bdf840e-ed49-415d-844b-7b9c85a03061",
                  "parentUUID": "3c362ea5-1388-4aff-a28e-42d258e54ac4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6dec6e7-65c9-4681-a7f9-3c4ad04ec107",
                "a9ee7601-5244-412c-b50c-8aaa4de69407",
                "1af453b1-c28d-4a19-8e85-1e7490840fb0",
                "6bdf840e-ed49-415d-844b-7b9c85a03061"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19622,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
              "title": "Testing the isMalicious function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(malicious_fn_desc);\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "420534b5-f5a2-4261-bdc7-00681cf77b25",
                  "parentUUID": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing malicious description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing malicious description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"for(;;)\");\nexpect(result).to.equal(true);",
                  "err": {},
                  "uuid": "6bc86722-04cf-4617-9fda-a3bd1c6dbb74",
                  "parentUUID": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing safe description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing safe description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(two_sum_fn_desc.desc);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "66714920-1d64-418e-8680-332de00de393",
                  "parentUUID": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing empty description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing empty description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "0106818a-8c46-4b53-b251-d03a5470873b",
                  "parentUUID": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing null description",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(null);\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "9f26ab18-5683-42ce-9d76-08fe9b449f32",
                  "parentUUID": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing random description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing random description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious(\"my name is Chris\");\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "76425110-627f-4d99-bf0b-d59053676b48",
                  "parentUUID": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing undefined description",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the isMalicious function Testing undefined description",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = oa.isMalicious();\nexpect(result).to.equal(false);",
                  "err": {},
                  "uuid": "6abb99b6-d2d0-4928-9489-78425b636bc4",
                  "parentUUID": "a94e47ae-91e9-49a7-8b7a-2b2b7e43c1f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "420534b5-f5a2-4261-bdc7-00681cf77b25",
                "6bc86722-04cf-4617-9fda-a3bd1c6dbb74",
                "66714920-1d64-418e-8680-332de00de393",
                "0106818a-8c46-4b53-b251-d03a5470873b",
                "9f26ab18-5683-42ce-9d76-08fe9b449f32",
                "76425110-627f-4d99-bf0b-d59053676b48",
                "6abb99b6-d2d0-4928-9489-78425b636bc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "445d9f60-66e2-41be-b4dd-e231a7eca67f",
              "title": "Testing the TestGeneratedCode function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing a correctly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 1\n})\n\nexpect(res.length).to.equal(3);\nexpect(res[0].passed).to.equal(true);\n    \nexpect(res[1].passed).to.equal(true);\n    \nexpect(res[2].passed).to.equal(true);",
                  "err": {},
                  "uuid": "4261723e-fd91-4f7f-a2d2-510c70cd2e61",
                  "parentUUID": "445d9f60-66e2-41be-b4dd-e231a7eca67f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a correctly generated LLM function for invalid q",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a correctly generated LLM function for invalid q",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo(a, b) { return a + b }\",\n    \"id\": 99\n})\n\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "735343e6-8b0b-4151-9c26-b4a9f6405cfc",
                  "parentUUID": "445d9f60-66e2-41be-b4dd-e231a7eca67f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing an incorrectly generated LLM function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing an incorrectly generated LLM function for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return; }\",\n    \"id\": 1 \n})\n    \nexpect(res.length).to.equal(3);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].passed).to.equal(false);\n    \nexpect(res[1].passed).to.equal(false);\n    \nexpect(res[2].passed).to.equal(false);",
                  "err": {},
                  "uuid": "a6f722ac-cf5b-4e3a-ae24-5d6c8f3f0143",
                  "parentUUID": "445d9f60-66e2-41be-b4dd-e231a7eca67f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a broken function for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a broken function for Q1",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { , }\",\n    \"id\": 1 \n})\nconsole.log(res);\n    \nexpect(res.length).to.equal(3);\nexpect(res[0]).to.not.equal(null);\nexpect(res[0].passed).to.equal(false);\nexpect(res[1].passed).to.equal(false);\nexpect(res[2].passed).to.equal(false);\nexpect(res[0].actual_outputs[0]).to.contain(\"Code Failed to Compile: Unexpected token \\',\\'\");",
                  "err": {},
                  "uuid": "7f036ffa-8879-49fe-bd8e-089aea4764cf",
                  "parentUUID": "445d9f60-66e2-41be-b4dd-e231a7eca67f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a function with missing parameters for Q1",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing a function with missing parameters for Q1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = oa.TestGeneratedCode({\n    \"llm_code\": \"function foo() { return a + b }\",\n    \"id\": 1\n})\n    \nexpect(res.length).to.equal(3);\nexpect(res[0].passed).to.equal(false);\nexpect(res[0].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[1].passed).to.equal(false);\nexpect(res[1].actual_outputs[0]).to.contain(\"a is not defined\");\nexpect(res[2].passed).to.equal(false);\nexpect(res[2].actual_outputs[0]).to.contain(\"a is not defined\");",
                  "err": {},
                  "uuid": "4344f113-45b4-4256-a1cb-ecb849c51f53",
                  "parentUUID": "445d9f60-66e2-41be-b4dd-e231a7eca67f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing improper JSON formats and undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the TestGeneratedCode function Testing improper JSON formats and undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.TestGeneratedCode({})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"id\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode({\"llm_code\": \"hello\"})).to.equal(null);\nexpect(oa.TestGeneratedCode(null)).to.equal(null);\nexpect(oa.TestGeneratedCode()).to.equal(null);",
                  "err": {},
                  "uuid": "d09b855b-82fb-44f2-a8c5-295ba8bfe869",
                  "parentUUID": "445d9f60-66e2-41be-b4dd-e231a7eca67f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4261723e-fd91-4f7f-a2d2-510c70cd2e61",
                "735343e6-8b0b-4151-9c26-b4a9f6405cfc",
                "a6f722ac-cf5b-4e3a-ae24-5d6c8f3f0143",
                "7f036ffa-8879-49fe-bd8e-089aea4764cf",
                "4344f113-45b4-4256-a1cb-ecb849c51f53",
                "d09b855b-82fb-44f2-a8c5-295ba8bfe869"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "1a202474-fe16-4188-90d3-686512ade8a6",
              "title": "Combining everything",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Regular test with proper query",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Combining everything Regular test with proper query",
                  "timedOut": false,
                  "duration": 8620,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const resp = await oa.FetchResponse(two_sum_fn_desc.desc);\nexpect(resp).to.not.equal(null);\nexpect(resp.llm_code.startsWith(\"function\")).to.equal(true);\nexpect(resp.llm_code).to.match(/function(.|\\s)*\\}/);\n    \nresp.id = 1;\n\nconst graded = oa.TestGeneratedCode(resp);\nexpect(graded.length).to.equal(3);\nexpect(graded[0].passed).to.equal(true);\nexpect(graded[1].passed).to.equal(true);\nexpect(graded[2].passed).to.equal(true);",
                  "err": {},
                  "uuid": "66313a16-4eb1-487d-884a-e49631341387",
                  "parentUUID": "1a202474-fe16-4188-90d3-686512ade8a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66313a16-4eb1-487d-884a-e49631341387"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8620,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "313ec287-4b64-42da-8940-a636a8805c61",
              "title": "Testing the getTotalScore function",
              "fullFile": "/usr/src/app/server/test/ollama_api.test.js",
              "file": "/test/ollama_api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing when results are null/undefined",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when results are null/undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore()).to.equal(null);\nexpect(oa.getTotalScore(null)).to.equal(null);\nexpect(oa.getTotalScore([])).to.equal(0);",
                  "err": {},
                  "uuid": "3e61e4aa-18aa-47b8-8c5e-ffd0f4a6599e",
                  "parentUUID": "313ec287-4b64-42da-8940-a636a8805c61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing when error in testing function (i.e. errors)",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing when error in testing function (i.e. errors)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(err_results)).to.equal(0);",
                  "err": {},
                  "uuid": "1f7391cd-1efe-4f48-b4ba-c9e8d3df7a5c",
                  "parentUUID": "313ec287-4b64-42da-8940-a636a8805c61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing with normal results",
                  "fullTitle": "Tests for Ollama Backend Fetching, Parsing, and Grading Helpers Testing the getTotalScore function Testing with normal results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(oa.getTotalScore(normal_results)).to.equal(6);",
                  "err": {},
                  "uuid": "a6036b08-76bf-479f-87fa-603ba9282e5b",
                  "parentUUID": "313ec287-4b64-42da-8940-a636a8805c61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e61e4aa-18aa-47b8-8c5e-ffd0f4a6599e",
                "1f7391cd-1efe-4f48-b4ba-c9e8d3df7a5c",
                "a6036b08-76bf-479f-87fa-603ba9282e5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "3a3f64f4-01ef-4d61-90d5-d728784de494",
          "title": "Tests for user_data functions",
          "fullFile": "/usr/src/app/server/test/user_data.test.js",
          "file": "/test/user_data.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"before each\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();",
              "err": {},
              "uuid": "4bd58267-6d39-4d57-bfe0-503d4369d1d8",
              "parentUUID": "3a3f64f4-01ef-4d61-90d5-d728784de494",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Tests for user_data functions\"",
              "fullTitle": "Tests for user_data functions \"after all\" hook in \"Tests for user_data functions\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "clearFolder();\nudata.loadUserDataOnStart(\"data\");",
              "err": {},
              "uuid": "5b85450f-2828-49b1-8588-1c02ee4ba2ff",
              "parentUUID": "3a3f64f4-01ef-4d61-90d5-d728784de494",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "dd215aa4-ec1f-4260-9df8-8ed5093b0166",
              "title": "Testing the loadUserDataOnStart function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing an empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing an empty folder",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(0);",
                  "err": {},
                  "uuid": "45138534-61b3-42d2-8c3f-ef6cc79f0b7a",
                  "parentUUID": "dd215aa4-ec1f-4260-9df8-8ed5093b0166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-empty folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-empty folder",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nconst users = udata.loadUserDataOnStart(testFolderName);\nexpect(users.length).to.equal(2);",
                  "err": {},
                  "uuid": "9eb670fb-81c1-4bdf-9089-bcaa4ed10083",
                  "parentUUID": "dd215aa4-ec1f-4260-9df8-8ed5093b0166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing a non-existent folder",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing a non-existent folder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart(\"nonExistentFolder\");\nexpect(users).to.equal(null);",
                  "err": {},
                  "uuid": "577bdee8-a9e3-4955-84c9-276cec21bb87",
                  "parentUUID": "dd215aa4-ec1f-4260-9df8-8ed5093b0166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing null or missing folder param",
                  "fullTitle": "Tests for user_data functions Testing the loadUserDataOnStart function Testing null or missing folder param",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const users = udata.loadUserDataOnStart();\nexpect(users).to.equal(null);\nconst users2 = udata.loadUserDataOnStart(null);\nexpect(users2).to.equal(null);",
                  "err": {},
                  "uuid": "fe4cc98b-2676-4f99-9290-f60df23380f0",
                  "parentUUID": "dd215aa4-ec1f-4260-9df8-8ed5093b0166",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45138534-61b3-42d2-8c3f-ef6cc79f0b7a",
                "9eb670fb-81c1-4bdf-9089-bcaa4ed10083",
                "577bdee8-a9e3-4955-84c9-276cec21bb87",
                "fe4cc98b-2676-4f99-9290-f60df23380f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "07a96f9a-e40c-43a3-bfbc-f8d55882a6dc",
              "title": "Testing the initializeUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Initializing an existing user",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing an existing user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "aa5cf3c1-8751-4a1e-ae09-165159d12810",
                  "parentUUID": "07a96f9a-e40c-43a3-bfbc-f8d55882a6dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing multiple users",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing multiple users",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nexpect(udata.getUsers().length).to.equal(1);\nexpect(res).to.equal(\"success\");\nres = udata.initializeUserDataFile(testFolderName, user1.user_id, user1.nickname);\nexpect(udata.getUsers().length).to.equal(2);\nexpect(res).to.equal(\"success\");",
                  "err": {},
                  "uuid": "b76564a8-ccb1-47be-baa4-757fb83c2dd1",
                  "parentUUID": "07a96f9a-e40c-43a3-bfbc-f8d55882a6dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null and invalid folder",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null and invalid folder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\", user0.user_id, user0.nickname);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "fcf6bbad-a32e-46c6-82cf-7317445aeb04",
                  "parentUUID": "07a96f9a-e40c-43a3-bfbc-f8d55882a6dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with null/missing userid/nickname",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with null/missing userid/nickname",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(testFolderName, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile(\"nonExistentFolder\");\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "ae913b53-0e8f-4643-86de-57e8a778ab2c",
                  "parentUUID": "07a96f9a-e40c-43a3-bfbc-f8d55882a6dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Initializing with all null/missing params",
                  "fullTitle": "Tests for user_data functions Testing the initializeUserDataFile function Initializing with all null/missing params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let res = udata.initializeUserDataFile(null, null, null);\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);\nres = udata.initializeUserDataFile();\nexpect(res).to.equal(null);\nexpect(udata.getUsers().length).to.equal(0);",
                  "err": {},
                  "uuid": "8cf3c65e-9fde-4ec5-a790-5cc21b10fcbe",
                  "parentUUID": "07a96f9a-e40c-43a3-bfbc-f8d55882a6dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa5cf3c1-8751-4a1e-ae09-165159d12810",
                "b76564a8-ccb1-47be-baa4-757fb83c2dd1",
                "fcf6bbad-a32e-46c6-82cf-7317445aeb04",
                "ae913b53-0e8f-4643-86de-57e8a778ab2c",
                "8cf3c65e-9fde-4ec5-a790-5cc21b10fcbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "6a4aa40f-90fb-4941-b264-98193623c555",
              "title": "Testing the updateUserDataFile function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Updating an existing user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, correct directory",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "3c3cf0a2-6f5c-4919-83c6-efeba7c4850d",
                  "parentUUID": "6a4aa40f-90fb-4941-b264-98193623c555",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating an existing user, wrong directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating an existing user, wrong directory",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nconst updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(\"nonExistentFolder\", updatedUser);\nexpect(res).to.equal(null);",
                  "err": {},
                  "uuid": "7b63f9bc-5ba5-4649-986f-3398c5045814",
                  "parentUUID": "6a4aa40f-90fb-4941-b264-98193623c555",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating with null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating with null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateUserDataFile(null, null)).to.equal(null);\nexpect(udata.updateUserDataFile()).to.equal(null);\nexpect(udata.updateUserDataFile(null, user0)).to.equal(null);\nexpect(udata.updateUserDataFile(testFolderName, null)).to.equal(null);",
                  "err": {},
                  "uuid": "271025d3-f2db-4198-a35a-737c6242528a",
                  "parentUUID": "6a4aa40f-90fb-4941-b264-98193623c555",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Updating non-existent user, correct directory",
                  "fullTitle": "Tests for user_data functions Testing the updateUserDataFile function Updating non-existent user, correct directory",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedUser = {\n    \"user_id\": \"1234567890\",\n    \"nickname\": \"mikey\",\n    \"questions_solved\": {\n        \"1\": 3,\n        \"2\": 2\n    },\n    \"num_points\": 5\n}\nres = udata.updateUserDataFile(testFolderName, updatedUser);\nexpect(res).to.equal(\"success\");\nconst retrievedUser = udata.getUserDataFile(testFolderName, updatedUser.user_id);\nexpect(retrievedUser.user_id).to.equal(updatedUser.user_id);\nexpect(retrievedUser.nickname).to.equal(updatedUser.nickname);\nexpect(retrievedUser.questions_solved[\"1\"]).to.equal(3);\nexpect(retrievedUser.questions_solved[\"2\"]).to.equal(2);\nexpect(retrievedUser.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "e04e656a-c085-449e-90d8-013519492a2d",
                  "parentUUID": "6a4aa40f-90fb-4941-b264-98193623c555",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c3cf0a2-6f5c-4919-83c6-efeba7c4850d",
                "7b63f9bc-5ba5-4649-986f-3398c5045814",
                "271025d3-f2db-4198-a35a-737c6242528a",
                "e04e656a-c085-449e-90d8-013519492a2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "9624ee03-7008-4d6e-8c80-4cc1286c691c",
              "title": "Testing the updateQuestionScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updateQuestionScore(null, null)).to.equal(null);\nexpect(udata.updateQuestionScore()).to.equal(null);\nexpect(udata.updateQuestionScore(null, newQuestionData)).to.equal(null);\nexpect(udata.updateQuestionScore(user0, null)).to.equal(null);",
                  "err": {},
                  "uuid": "9884ef3a-3d9e-479b-876a-dca51132e9d6",
                  "parentUUID": "9624ee03-7008-4d6e-8c80-4cc1286c691c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, new score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, new score",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser = udata.updateQuestionScore(user, newQuestionData)\nexpect(updatedUser.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "28f90333-4334-42f6-b854-6a1ae45cc8e9",
                  "parentUUID": "9624ee03-7008-4d6e-8c80-4cc1286c691c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, lower score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, lower score",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataLower);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(updatedUser1.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "b4d4083b-db3e-46d7-821c-6dff9fed4f72",
                  "parentUUID": "9624ee03-7008-4d6e-8c80-4cc1286c691c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing valid user, higher score",
                  "fullTitle": "Tests for user_data functions Testing the updateQuestionScore function Testing valid user, higher score",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nlet updatedUser0 = udata.updateQuestionScore(user, newQuestionData);\nlet updatedUser1 = udata.updateQuestionScore(updatedUser0, newQuestionDataHigher);\nexpect(updatedUser1.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(updatedUser1.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "416aa00b-8d30-4642-a3b1-512224bb0e45",
                  "parentUUID": "9624ee03-7008-4d6e-8c80-4cc1286c691c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9884ef3a-3d9e-479b-876a-dca51132e9d6",
                "28f90333-4334-42f6-b854-6a1ae45cc8e9",
                "b4d4083b-db3e-46d7-821c-6dff9fed4f72",
                "416aa00b-8d30-4642-a3b1-512224bb0e45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "461c5309-1f30-4610-947e-56a6ebf8b310",
              "title": "Testing the updatedUserFileWithNewScore function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined params",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing null/undefined params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.updatedUserFileWithNewScore(testFolderName, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(\"nonExistentFolder\", null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, user0.user_id, null)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore(null, null, user0.user_id)).to.equal(null);\nexpect(udata.updatedUserFileWithNewScore()).to.equal(null);",
                  "err": {},
                  "uuid": "9016e97e-9458-4e8f-97df-38ff6e8b317c",
                  "parentUUID": "461c5309-1f30-4610-947e-56a6ebf8b310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for a new question",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for a new question",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "d3e70967-ab25-40a4-aaab-b3c15e651bec",
                  "parentUUID": "461c5309-1f30-4610-947e-56a6ebf8b310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with lower score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with lower score",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataLower);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.num_points).to.equal(2);",
                  "err": {},
                  "uuid": "781b7bf8-fa3e-44fb-8f78-f17930942bf6",
                  "parentUUID": "461c5309-1f30-4610-947e-56a6ebf8b310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for an existing question with higher score",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for an existing question with higher score",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nlet res = udata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionDataHigher);\nexpect(res).to.equal(\"success\");\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionDataHigher.score);\nexpect(user.num_points).to.equal(3);",
                  "err": {},
                  "uuid": "2f87c9a0-d16a-45ee-bdcf-11165e36a856",
                  "parentUUID": "461c5309-1f30-4610-947e-56a6ebf8b310",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing updating the score for multiple questions",
                  "fullTitle": "Tests for user_data functions Testing the updatedUserFileWithNewScore function Testing updating the score for multiple questions",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeUserDataFile(testFolderName, user0.user_id, user0.nickname);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, newQuestionData);\nudata.updatedUserFileWithNewScore(testFolderName, user0.user_id, diffQuestionData);\nlet user = udata.getUserDataFile(testFolderName, user0.user_id);\nexpect(user.questions_solved[newQuestionData.qid]).to.equal(newQuestionData.score);\nexpect(user.questions_solved[diffQuestionData.qid]).to.equal(diffQuestionData.score);\nexpect(user.num_points).to.equal(5);",
                  "err": {},
                  "uuid": "3ebd0ebe-ae6a-468c-92ab-8146a6af9b5f",
                  "parentUUID": "461c5309-1f30-4610-947e-56a6ebf8b310",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9016e97e-9458-4e8f-97df-38ff6e8b317c",
                "d3e70967-ab25-40a4-aaab-b3c15e651bec",
                "781b7bf8-fa3e-44fb-8f78-f17930942bf6",
                "2f87c9a0-d16a-45ee-bdcf-11165e36a856",
                "3ebd0ebe-ae6a-468c-92ab-8146a6af9b5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 62,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "a1fda5a4-098a-4751-a4a3-fa84ac516000",
              "title": "Testing initializeAttemptData function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/missing input",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing null/missing input",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.initializeAttemptData()).to.equal(null);\nexpect(udata.initializeAttemptData(null, null, null)).to.equal(null);\nexpect(udata.initializeAttemptData(attemptsFolder, null, null)).to.equal(null);\nexpect(udata.initializeAttemptData(null, 1, null)).to.equal(null);\nexpect(udata.initializeAttemptData(null, 1, user0.user_id)).to.equal(null);",
                  "err": {},
                  "uuid": "ed42a434-97d8-49bc-8ee0-11885e530347",
                  "parentUUID": "a1fda5a4-098a-4751-a4a3-fa84ac516000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing normal input",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(res).to.eql([]);\nexpect(udata.getAttemptData(attemptsFolder, 1, user0.user_id)).to.eql([]);",
                  "err": {},
                  "uuid": "fd4dbcb9-a60b-44e8-abec-72b90a13b82e",
                  "parentUUID": "a1fda5a4-098a-4751-a4a3-fa84ac516000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing existing user",
                  "fullTitle": "Tests for user_data functions Testing initializeAttemptData function Testing existing user",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(udata.initializeAttemptData(attemptsFolder, 1, user0.user_id)).to.equal(null);",
                  "err": {},
                  "uuid": "13335897-fb1d-4483-9be6-61d0cdd57063",
                  "parentUUID": "a1fda5a4-098a-4751-a4a3-fa84ac516000",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed42a434-97d8-49bc-8ee0-11885e530347",
                "fd4dbcb9-a60b-44e8-abec-72b90a13b82e",
                "13335897-fb1d-4483-9be6-61d0cdd57063"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            },
            {
              "uuid": "925f5223-8414-47f0-b507-de364437f00a",
              "title": "Testing addAttemptToUserData function",
              "fullFile": "/usr/src/app/server/test/user_data.test.js",
              "file": "/test/user_data.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Testing null/undefined input",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing null/undefined input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.addAttemptToUserData(attemptsFolder, null, null, null)).to.equal(null);\nexpect(udata.addAttemptToUserData(null, user0.user_id, 1, attemptDataBadExample)).to.equal(null);\nexpect(udata.addAttemptToUserData()).to.equal(null);\nexpect(udata.addAttemptToUserData(null, null, null, null)).to.equal(null);",
                  "err": {},
                  "uuid": "ea76f370-8823-4384-aef8-12a7d343fabd",
                  "parentUUID": "925f5223-8414-47f0-b507-de364437f00a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input with non-existing attempt data file",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing normal input with non-existing attempt data file",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(udata.addAttemptToUserData(attemptsFolder, user0.user_id, 1, attemptDataGoodExample)).to.equal(\"success\");\nconst data = udata.getAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(data.length).to.equal(1);\nexpect(data[0].results.length).to.equal(3);\nexpect(data[0].desc).to.not.equal(null);",
                  "err": {},
                  "uuid": "76484f0a-d82e-4db4-ba77-1db73944b8c2",
                  "parentUUID": "925f5223-8414-47f0-b507-de364437f00a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Testing normal input with existing attempt data file",
                  "fullTitle": "Tests for user_data functions Testing addAttemptToUserData function Testing normal input with existing attempt data file",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "udata.initializeAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(udata.addAttemptToUserData(attemptsFolder, user0.user_id, 1, attemptDataGoodExample)).to.equal(\"success\");\nconst data = udata.getAttemptData(attemptsFolder, 1, user0.user_id);\nexpect(data.length).to.equal(1);\nexpect(data[0].results.length).to.equal(3);\nexpect(data[0].desc).to.not.equal(null);",
                  "err": {},
                  "uuid": "078f24ea-b25a-42e5-a433-10c107d9ee1b",
                  "parentUUID": "925f5223-8414-47f0-b507-de364437f00a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea76f370-8823-4384-aef8-12a7d343fabd",
                "76484f0a-d82e-4db4-ba77-1db73944b8c2",
                "078f24ea-b25a-42e5-a433-10c107d9ee1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.5.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}